// prisma/schema.prisma

// This is your Prisma schema file for MongoDB
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 
// Note: Better Auth handles authentication-related models (users, sessions, etc.)
// This schema is for your application's data models only

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Todo application data models
model Todo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    Priority @default(MEDIUM)
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId      String   // References Better Auth user ID (not a Prisma relation)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([completed])
  @@index([priority])
  @@index([dueDate])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  color       String   @default("#3b82f6") // Hex color code
  icon        String?  // Icon name or emoji
  userId      String   // References Better Auth user ID
  todos       Todo[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, userId]) // User can't have duplicate category names
  @@index([userId])
}

// User statistics and achievements
model UserStats {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @unique // Better Auth user ID
  totalTodos            Int      @default(0)
  completedTodos        Int      @default(0)
  currentStreak         Int      @default(0)
  longestStreak         Int      @default(0)
  lastCompletionDate    DateTime?
  totalPoints           Int      @default(0)
  level                 Int      @default(1)
  achievements          String[] // Array of achievement IDs
  weeklyGoal            Int      @default(7) // Default weekly goal
  monthlyGoal           Int      @default(30) // Default monthly goal
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Achievement definitions
model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  icon        String   // Icon name or emoji
  type        AchievementType
  requirement Int      // Number required to unlock (e.g., 10 todos completed)
  points      Int      @default(100) // Points awarded
  rarity      Rarity   @default(COMMON)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Todo templates for quick creation
model TodoTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  priority    Priority @default(MEDIUM)
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId      String   // References Better Auth user ID
  isPublic    Boolean  @default(false) // Can be shared with other users
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([isPublic])
}

// User preferences for the todo app
model UserPreference {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @unique // Better Auth user ID
  theme                 String   @default("light") // "light" | "dark" | "system"
  defaultPriority       Priority @default(MEDIUM)
  defaultCategoryId     String?  @db.ObjectId
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  reminderTime          String   @default("09:00") // HH:MM format
  weekStartsOn          Int      @default(1) // 0 = Sunday, 1 = Monday
  dateFormat            String   @default("MM/DD/YYYY")
  timeFormat            String   @default("12h") // "12h" | "24h"
  language              String   @default("en")
  timezone              String   @default("UTC")
  soundEnabled          Boolean  @default(true)
  autoArchiveCompleted  Boolean  @default(false)
  showCompletedTodos    Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Recurring todo patterns
model RecurringTodo {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  priority    Priority      @default(MEDIUM)
  categoryId  String        @db.ObjectId
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId      String        // References Better Auth user ID
  pattern     RecurringPattern
  interval    Int           @default(1) // Every X days/weeks/months
  daysOfWeek  Int[]         // For weekly patterns: [0,1,2,3,4,5,6]
  dayOfMonth  Int?          // For monthly patterns: 1-31
  isActive    Boolean       @default(true)
  nextDue     DateTime
  lastCreated DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
  @@index([nextDue])
  @@index([isActive])
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AchievementType {
  COMPLETION_COUNT    // Complete X todos
  STREAK_DAYS        // Maintain X day streak
  CATEGORY_MASTER    // Complete X todos in specific category
  SPEED_DEMON        // Complete X todos in one day
  EARLY_BIRD         // Complete todos before due date
  PERFECTIONIST      // Complete all todos in a week/month
  CONSISTENCY        // Complete todos X days in a row
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum RecurringPattern {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}